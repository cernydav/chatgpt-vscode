{
  "name": "gptcode",
  "displayName": "gptcode: write and improve code using AI",
  "description": "gptcode",
  "version": "0.5.1",
  "publisher": "cernydav",
  "icon": "resources/extensionIcon.png",
  "license": "MIT",
  "repository": {
    "url": "https://github.com/timkmecl/gptcode-vscode"
  },
  "engines": {
    "vscode": "^1.73.0"
  },
  "categories": [
    "Other"
  ],
  "keywords": [
    "gptcode",
    "openai",
    "gpt3",
    "copilot",
    "ai",
    "explain",
    "find bugs",
    "explain ",
    "refactor"
  ],
  "activationEvents": [
    "onView:gptcode.chatView",
    "onCommand:gptcode.ask",
    "onCommand:gptcode.explain",
    "onCommand:gptcode.refactor",
    "onCommand:gptcode.optimize",
    "onCommand:gptcode.problems",
    "onCommand:gptcode.replaceSelectedDescription",
    "onCommand:gptcode.writeTest"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "gptcode.ask",
        "title": "Ask gptcode"
      },
      {
        "command": "gptcode.explain",
        "title": "gptcode: Explain selection"
      },

      {
        "command": "gptcode.replaceSelectedDescription",
        "title": "gptcode: replaceSelectedDescription selection"
      },

      {
        "command": "gptcode.writeTest",
        "title": "gptcode: writeTest selection"
      },

      {
        "command": "gptcode.refactor",
        "title": "gptcode: Refactor selection"
      },
      {
        "command": "gptcode.findProblems",
        "title": "gptcode: Find problems"
      },
      {
        "command": "gptcode.optimize",
        "title": "gptcode: Optimize selection"
      },
      {
        "command": "gptcode.conversationId",
        "title": "Set gptcode conversation ID"
      },
      {
        "command": "gptcode.resetConversation",
        "title": "Reset gptcode conversation"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "gptcode.ask",
          "when": "editorTextFocus",
          "group": "gptcode-menu-group@1"
        },
        {
          "command": "gptcode.explain",
          "when": "editorHasSelection",
          "group": "gptcode-menu-group@2"
        },
        {
          "command": "gptcode.refactor",
          "when": "editorHasSelection",
          "group": "gptcode-menu-group@3"
        },

        {
          "command": "gptcode.replaceSelectedDescription",
          "when": "editorHasSelection",
          "group": "gptcode-menu-group@3"
        },        {
          "command": "gptcode.writeTest",
          "when": "editorHasSelection",
          "group": "gptcode-menu-group@3"
        },
        {
          "command": "gptcode.findProblems",
          "when": "editorHasSelection",
          "group": "gptcode-menu-group@4"
        },
        {
          "command": "gptcode.optimize",
          "when": "editorHasSelection",
          "group": "gptcode-menu-group@5"
        }
      ],
      "commandPalette": [
        {
          "command": "gptcode.ask"
        },
        {
          "command": "gptcode.explain",
          "when": "editorHasSelection"
        },
        {
          "command": "gptcode.refactor",
          "when": "editorHasSelection"
        },
        {
          "command": "gptcode.findProblems",
          "when": "editorHasSelection"
        },
        {
          "command": "gptcode.optimize",
          "when": "editorHasSelection"
        },
        {
          "command": "gptcode.conversationId"
        },
        {
          "command": "gptcode.resetConversation"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "gptcode",
          "title": "gptcode",
          "icon": "resources/icon.png"
        }
      ]
    },
    "views": {
      "gptcode": [
				{
					"type": "webview",
					"id": "gptcode.chatView",
					"name": "gptcode"
				}
      ]
    },
    "configuration": {
      "title": "gptcode",
      "type": "object",
      "properties": {

        "gptcode.apiKey": {
          "type": "string",
          "default": null,
          "description": "Your OpenAI API Key"
        },
        "gptcode.parameters.model": {
          "type": "string",
          "enum": ["text-davinci-003", "text-curie-001", "text-babbage-001", "text-ada-001", "code-davinci-002", "code-cushman-001"],
          "default": "text-davinci-003",
          "description": "Model to use for the prompt"
        },
        "gptcode.parameters.suffix": {
          "type": ["string", "null"],
          "default": null,
          "description": "The suffix that comes after a completion of inserted text."
        },
        "gptcode.parameters.max_tokens": {
          "type": "integer",
          "default": 16,
          "description": "The maximum number of tokens to generate in the completion."
        },
        "gptcode.parameters.temperature": {
          "type": "number",
          "default": 1,
          "description": "What sampling temperature to use. Higher values means the model will take more risks."
        },
        "gptcode.parameters.top_p": {
          "type": "number",
          "default": 1,
          "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass."
        },
        "gptcode.parameters.n": {
          "type": "integer",
          "default": 1,
          "description": "How many completions to generate for each prompt."
        },
        "gptcode.parameters.stream": {
          "type": "boolean",
          "default": false,
          "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message."
        },
        "gptcode.parameters.logprobs": {
          "type": ["integer", "null"],
          "default": null,
          "description": "Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens."
        },
        "gptcode.parameters.echo": {
          "type": "boolean",
          "default": false,
          "description": "Echo back the prompt in addition to the completion"
        },
        "gptcode.parameters.stop": {
          "type": ["string", "array", "null"],
          "default": null,
          "maxItems": 4,
          "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence."
        },
        "gptcode.parameters.presence_penalty": {
          "type": "number",
          "default": 0,
          "minimum": -2.0,
          "maximum": 2.0,
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics."
        },
        "gptcode.parameters.frequency_penalty": {
          "type": "number",
          "default": 0,
          "minimum": -2.0,
          "maximum": 2.0,
          "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim."
        },
        "gptcode.parameters.best_of": {
          "type": "integer",
          "default": 1,
          "description": "Generates best_of completions server-side and returns the 'best' (the one with the highest log probability per token). Results cannot be streamed."
        },
        "gptcode.parameters.logit_bias": {
          "type": ["object", "null"],
          "default": null,
          "description": "Modify the likelihood of specified tokens appearing in the completion."
        },
        "gptcode.pasteOnClick": {
          "type": "boolean",
          "default": true,
          "description": "Paste the code from a codeblock inside the response into the editor when you click on it",
          "order": 2
        },
        "gptcode.promptPrefix.explain": {
          "type": "string",
          "default": "Explain what this code does: ",
          "description": "The prompt prefix used for explaining the selected code",
          "order": 3
        },
        "gptcode.promptPrefix.refactor": {
          "type": "string",
          "default": "Refactor this code and explain what's changed: ",
          "description": "The prompt prefix used for refactoring the selected code",
          "order": 4
        },
        "gptcode.promptPrefix.findProblems": {
          "type": "string",
          "default": "Find problems with the following code, fix them and explain what was wrong (Do not change anything else): ",
          "description": "The prompt prefix used for finding problems in the selected code",
          "order": 5
        },
        "gptcode.promptPrefix.optimize": {
          "type": "string",
          "default": "Optimize the following code: ",
          "description": "The prompt prefix used for optimizing the selected code",
          "order": 6
        },

        "gptcode.promptPrefix.replaceSelectedDescription": {
          "type": "string",
          "default": "Write code for following description: ",
          "description": "The prompt prefix used for refactoring the selected code",
          "order": 7
        },
        "gptcode.promptPrefix.writeTest": {
          "type": "string",
          "default": "Write javascript test for following code: ",
          "description": "The prompt prefix used for refactoring the selected code",
          "order": 8
        },

        "gptcode.keepConversation": {
          "type": "boolean",
          "default": true,
          "description": "Keep the conversation going by using the same conversation ID for all requests (allows follow-up questions)",
          "order": 9
        },"gptcode.timeoutLength": {
          "type": "number",
          "default": "120",
          "description": "How long should the request wait for a response before timing out (in seconds)",
          "order": 10
        },
        "gptcode.selectedInsideCodeblock": {
          "type": "boolean",
          "default": true,
          "description": "Append selected code as a codeblock (```...code...```) instead of plain text",
          "order": 11
        }

      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "yarn run compile-tests && yarn run compile && yarn run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "update-package-lock": "npm install --package-lock-only"
  },
  "devDependencies": {
    "@types/glob": "^8.0.0",
    "@types/mocha": "^10.0.1",
    "@types/node": "16.x",
    "@types/vscode": "^1.73.0",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "@vscode/test-electron": "^2.2.0",
    "eslint": "^8.28.0",
    "glob": "^8.0.3",
    "mocha": "^10.1.0",
    "ts-loader": "^9.4.1",
    "typescript": "^4.9.3",
    "webpack": "^5.75.0",
    "webpack-cli": "^5.0.0"
  },
  "dependencies": {
    "markdown-it": "^13.0.1",
    "openai": "^3.1.0"
  }
}
